{"version":3,"sources":["hooks/use-search.ts","models/product.tsx","models/category.tsx","components/product-rows.tsx","components/category-rows.tsx","components/products-list.tsx","index.tsx"],"names":["useSearch","useState","query","setQuery","filtered","setFiltered","fuse","setFuse","items","options","Fuse","undefined","search","map","r","item","getXMLTagContent","xml","tagName","elems","getElementsByTagName","length","textContent","Product","id","name","price","count","this","Category","names","products","getAttribute","split","Array","from","e","ProductRows","Table","Body","index","Row","Cell","CategoryHeader","Header","HeaderCell","colSpan","Breadcrumb","icon","sections","key","content","CategoryRows","categories","a","fetch","response","DOMParser","text","document","parseFromString","ProductsList","setCategories","filteredProducts","setProducts","useEffect","load","then","c","flat","keys","Segment","basic","Input","fluid","iconPosition","value","onChange","target","action","Button","onClick","unstackable","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4f5cb5ba.chunk.js","sourcesContent":["import { useState } from 'react'\nimport Fuse from 'fuse.js'\n\ntype setter<T> = (items: T[], options?: Fuse.IFuseOptions<T> | undefined) => void\n\ntype runQuery = (query: string) => void\n\nfunction useSearch<T>(): [T[] | undefined, setter<T>, string, runQuery] {\n  const [query, setQuery] = useState<string>('')\n\n  const [filtered, setFiltered] = useState<T[]>()\n\n  const [fuse, setFuse] = useState<Fuse<T>>()\n\n  const setter: setter<T> = (items, options) => {\n    setFuse(new Fuse(items, options))\n\n    setFiltered(undefined)\n  }\n\n  const runQuery: runQuery = (query: string) => {\n    setQuery(query)\n\n    setFiltered(query === '' ? undefined : fuse?.search(query)?.map(r => r.item))\n  }\n\n  return [filtered, setter, query, runQuery]\n}\n\nexport default useSearch\n","function getXMLTagContent(xml: Element, tagName: string): string {\n  const elems = xml.getElementsByTagName(tagName)\n\n  return (elems.length >= 1 && elems[0].textContent) || ''\n}\n\nexport class Product {\n  id: string\n  name: string\n  price: string\n  count: string\n\n  constructor(xml: Element) {\n    this.id = getXMLTagContent(xml, 'code')\n    this.name = getXMLTagContent(xml, 'name')\n    this.price = getXMLTagContent(xml, 'price')\n    this.count = getXMLTagContent(xml, 'count')\n  }\n}\n","import { Product } from './product'\n\nexport class Category {\n  names: string[] | undefined\n  products: Product[]\n\n  constructor(xml: Element) {\n    this.names = xml.getAttribute('name')?.split('/')\n    this.products = Array.from(xml.getElementsByTagName('product')).map(e => new Product(e))\n  }\n}\n","import { Table } from 'semantic-ui-react'\nimport { Product } from '../models/product'\n\ninterface ProductRowsParams {\n  products: Product[]\n}\n\nconst ProductRows = ({ products }: ProductRowsParams) => <Table.Body>\n  {products.map(({ name, price, count }, index) => (\n    <Table.Row key={index}>\n      <Table.Cell>{name}</Table.Cell>\n\n      <Table.Cell>{price} грн</Table.Cell>\n\n      <Table.Cell>{count}</Table.Cell>\n    </Table.Row>\n  ))}\n</Table.Body>\n\nexport default ProductRows\n","import { Fragment } from 'react'\nimport { Breadcrumb, Table } from 'semantic-ui-react'\nimport { Category } from '../models/category'\nimport ProductRows from './product-rows'\n\ninterface CategoryRowsParams {\n  categories: Category[]\n}\n\ninterface CategoryNameParams {\n  names: string[]\n}\n\nconst CategoryRows = ({ categories }: CategoryRowsParams) => <>\n  {categories.map(({ names, products }, index) => (\n    <Fragment key={index}>\n      {names && <CategoryHeader names={names} />}\n\n      <ProductRows products={products} />\n    </Fragment>\n  ))}\n</>\n\nconst CategoryHeader = ({ names }: CategoryNameParams) => <Table.Header>\n  <Table.Row>\n    <Table.HeaderCell colSpan={3}>\n      <Breadcrumb icon='right angle' sections={names.map(name => ({ key: name, content: name }))} />\n    </Table.HeaderCell>\n  </Table.Row>\n</Table.Header>\n\nexport default CategoryRows\n","import { useEffect, useState } from 'react'\nimport { Button, Input, Table, Segment } from 'semantic-ui-react'\nimport useSearch from '../hooks/use-search'\n\nimport { Category } from '../models/category'\nimport { Product } from '../models/product'\nimport ProductRows from './product-rows'\nimport CategoryRows from './category-rows'\n\nasync function load(): Promise<Category[]> {\n  const response = await fetch('https://raw.githubusercontent.com/kivi-pu/products/master/products.xml')\n\n  const document = new DOMParser().parseFromString(await response.text(), 'text/xml')\n\n  return Array.from(document.getElementsByTagName('category')).map(e => new Category(e))\n}\n\nconst ProductsList = () => {\n  const [categories, setCategories] = useState<Category[]>()\n\n  const [filteredProducts, setProducts, query, setQuery] = useSearch<Product>()\n\n  useEffect(() => {\n    load().then(categories => {\n      setCategories(categories)\n\n      setProducts(categories.map(c => c.products).flat(), { keys: ['name'] })\n    })\n    // warning on setter functions missing from deps, that should be safe\n    // eslint-disable-next-line\n  }, [])\n\n  return (\n    <Segment basic>\n      <Input fluid icon='search' iconPosition='left' value={query} onChange={e => setQuery(e.target.value)}\n        action={<Button basic icon='delete' onClick={() => setQuery('')} />} />\n\n      <Table unstackable>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>Назва</Table.HeaderCell>\n\n            <Table.HeaderCell>Ціна</Table.HeaderCell>\n\n            <Table.HeaderCell>Наявність</Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n\n        {\n          filteredProducts === undefined\n            ? categories && <CategoryRows categories={categories} />\n            : <ProductRows products={filteredProducts} />\n        }\n      </Table >\n    </Segment>\n  )\n}\n\nexport default ProductsList\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'fomantic-ui-css/semantic.min.css'\n\nimport ProductsList from './components/products-list'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ProductsList />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}